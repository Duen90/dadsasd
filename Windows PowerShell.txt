>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n"
>>      ]
>>     }
>>    ],
>>    "source": [
>>     "while SEED <= MAX_SEED:\n",
>>     "    np.random.seed(SEED)\n",
>>     "    dates = pd.date_range(start=\"2000-01-01\", end=\"2024-01-01\", freq='B')\n",
>>     "    num_days = len(dates)\n",
>>     "    price_changes = np.random.normal(loc=0.0002, scale=0.01, size=num_days)\n",
>>     "    synthetic_prices = 10 * (1 + price_changes).cumprod()\n",
>>     "    data = pd.DataFrame(data={'Close': synthetic_prices}, index=dates)\n",
>>     "    short_window = 10\n",
>>     "    long_window = 50\n",
>>     "    data['SMA10'] = data['Close'].rolling(window=short_window, min_periods=1).mean()\n",
>>     "    data['SMA50'] = data['Close'].rolling(window=long_window, min_periods=1).mean()\n",
>>     "    data['Signal'] = 0\n",
>>     "    data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>     "    data['Position'] = data['Signal'].diff()\n",
>>     "    initial_investment = 100000\n",
>>     "    data['Portfolio Value'] = initial_investment * (data['Close'] / data['Close'].shift(1)).cumprod()\n",
>>     "    final_value = data['Portfolio Value'].iloc[-1]\n",
>>     "    roi = (final_value/initial_investment-1)*100\n",
>>     "    rows.append({'Seed': SEED, 'Final Value': final_value, 'ROI (%)': roi})\n",
>>     "    SEED += 1\n",
>>     "\n",
>>     "monte_carlo = pd.DataFrame(rows)\n",
>>     "\n",
>>     "    "
>>    ]
>>   },
>>   {
>>    "cell_type": "code",
>>    "execution_count": 9,
>>    "metadata": {},
>>    "outputs": [
>>     {
>>      "name": "stdout",
>>      "output_type": "stream",
>>      "text": [
>>       "Average ROI: 246.33%\n",
>>       "Share of Negative ROI: 12.20%\n"
>>      ]
>>     },
>>     {
>>      "data": {
>>       "image/png": "",
>>       "text/plain": [
>>        "<Figure size 1000x600 with 1 Axes>"
>>       ]
>>      },
>>      "metadata": {},
>>      "output_type": "display_data"
>>     }
>>    ],
>>    "source": [
>>     "average_roi = monte_carlo['ROI (%)'].mean()\n",
>>     "print(f\"Average ROI: {average_roi:.2f}%\")\n",
>>     "\n",
>>     "negative_roi_count = monte_carlo[monte_carlo['ROI (%)'] < 0].shape[0]\n",
>>     "total_roi_count = monte_carlo.shape[0]\n",
>>     "share_negative_roi = (negative_roi_count / total_roi_count) * 100\n",
>>     "print(f\"Share of Negative ROI: {share_negative_roi:.2f}%\")\n",
>>     "\n",
>>     "# Plot histogram of ROI values\n",
>>     "plt.figure(figsize=(10, 6))\n",
>>     "plt.hist(monte_carlo['ROI (%)'], bins=30, edgecolor='black')\n",
>>     "plt.title('Histogram of ROI (%)')\n",
>>     "plt.xlabel('ROI (%)')\n",
>>     "plt.ylabel('Frequency')\n",
>>     "plt.grid(True)\n",
>>     "plt.show()"
>>    ]
>>   }
>>  ],
>>  "metadata": {
>>   "kernelspec": {
>>    "display_name": "ml_trading",
>>    "language": "python",
>>    "name": "python3"
>>   },
>>   "language_info": {
>>    "codemirror_mode": {
>>     "name": "ipython",
>>     "version": 3
>>    },
>>    "file_extension": ".py",
>>    "mimetype": "text/x-python",
>>    "name": "python",
>>    "nbconvert_exporter": "python",
>>    "pygments_lexer": "ipython3",
>>    "version": "3.10.14"
>>   }
>>  },
>>  "nbformat": 4,
>>  "nbformat_minor": 2
>> }
PS C:\Users\jdp> {
>>  "cells": [
>>   {
>>    "cell_type": "code",
>>    "execution_count": 4,
>>    "metadata": {},
>>    "outputs": [],
>>    "source": [
>>     "import pandas as pd\n",
>>     "import numpy as np\n",
>>     "import matplotlib.pyplot as plt"
>>    ]
>>   },
>>   {
>>    "cell_type": "code",
>>    "execution_count": 5,
>>    "metadata": {},
>>    "outputs": [],
>>    "source": [
>>     "SEED = 1\n",
>>     "MAX_SEED = 500\n",
>>     "monte_carlo = pd.DataFrame(columns=['Seed', 'Final Value', 'ROI (%)'])\n",
>>     "rows = []\n"
>>    ]
>>   },
>>   {
>>    "cell_type": "code",
>>    "execution_count": 6,
>>    "metadata": {},
>>    "outputs": [
>>     {
>>      "name": "stderr",
>>      "output_type": "stream",
>>      "text": [
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
>>       "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work toupdate the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
>>       "A typical example is when you are setting values in a column of a DataFrame, like:\n",
>>       "\n",
>>       "df[\"col\"][row_indexer] = value\n",
>>       "\n",
>>       "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>       "C:\\Users\\soste\\AppData\\Local\\Temp\\ipykernel_15268\\3456675183.py:13: SettingWithCopyWarning: \n",
>>       "A value is trying to be set on a copy of a slice from a DataFrame\n",
>>       "\n",
>>       "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
>>       "  data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n"
>>      ]
>>     }
>>    ],
>>    "source": [
>>     "while SEED <= MAX_SEED:\n",
>>     "    np.random.seed(SEED)\n",
>>     "    dates = pd.date_range(start=\"2000-01-01\", end=\"2024-01-01\", freq='B')\n",
>>     "    num_days = len(dates)\n",
>>     "    price_changes = np.random.normal(loc=0.0002, scale=0.01, size=num_days)\n",
>>     "    synthetic_prices = 10 * (1 + price_changes).cumprod()\n",
>>     "    data = pd.DataFrame(data={'Close': synthetic_prices}, index=dates)\n",
>>     "    short_window = 10\n",
>>     "    long_window = 50\n",
>>     "    data['SMA10'] = data['Close'].rolling(window=short_window, min_periods=1).mean()\n",
>>     "    data['SMA50'] = data['Close'].rolling(window=long_window, min_periods=1).mean()\n",
>>     "    data['Signal'] = 0\n",
>>     "    data['Signal'][short_window:] = np.where(data['SMA10'][short_window:] > data['SMA50'][short_window:], 1, 0)\n",
>>     "    data['Position'] = data['Signal'].diff()\n",
>>     "    initial_investment = 100000\n",
>>     "    data['Portfolio Value'] = initial_investment * (data['Close'] / data['Close'].shift(1)).cumprod()\n",
>>     "    final_value = data['Portfolio Value'].iloc[-1]\n",
>>     "    roi = (final_value/initial_investment-1)*100\n",
>>     "    rows.append({'Seed': SEED, 'Final Value': final_value, 'ROI (%)': roi})\n",
>>     "    SEED += 1\n",
>>     "\n",
>>     "monte_carlo = pd.DataFrame(rows)\n",
>>     "\n",
>>     "    "
>>    ]
>>   },
>>   {
>>    "cell_type": "code",
>>    "execution_count": 9,
>>    "metadata": {},
>>    "outputs": [
>>     {
>>      "name": "stdout",
>>      "output_type": "stream",
>>      "text": [
>>       "Average ROI: 246.33%\n",
>>       "Share of Negative ROI: 12.20%\n"
>>      ]
>>     },
>>     {
>>      "data": {
>>       "image/png": "",
>>       "text/plain": [
>>        "<Figure size 1000x600 with 1 Axes>"
>>       ]
>>      },
>>      "metadata": {},
>>      "output_type": "display_data"
>>     }
>>    ],
>>    "source": [
>>     "average_roi = monte_carlo['ROI (%)'].mean()\n",
>>     "print(f\"Average ROI: {average_roi:.2f}%\")\n",
>>     "\n",
>>     "negative_roi_count = monte_carlo[monte_carlo['ROI (%)'] < 0].shape[0]\n",
>>     "total_roi_count = monte_carlo.shape[0]\n",
>>     "share_negative_roi = (negative_roi_count / total_roi_count) * 100\n",
>>     "print(f\"Share of Negative ROI: {share_negative_roi:.2f}%\")\n",
>>     "\n",
>>     "# Plot histogram of ROI values\n",
>>     "plt.figure(figsize=(10, 6))\n",
>>     "plt.hist(monte_carlo['ROI (%)'], bins=30, edgecolor='black')\n",
>>     "plt.title('Histogram of ROI (%)')\n",
>>     "plt.xlabel('ROI (%)')\n",
>>     "plt.ylabel('Frequency')\n",
>>     "plt.grid(True)\n",
>>     "plt.show()"
>>    ]
>>   }
>>  ],
>>  "metadata": {
>>   "kernelspec": {
>>    "display_name": "ml_trading",
>>    "language": "python",
>>    "name": "python3"
>>   },
>>   "language_info": {
>>    "codemirror_mode": {
>>     "name": "ipython",
>>     "version": 3
>>    },
>>    "file_extension": ".py",
>>    "mimetype": "text/x-python",
>>    "name": "python",
>>    "nbconvert_exporter": "python",
>>    "pygments_lexer": "ipython3",
>>    "version": "3.10.14"
>>   }
>>  },
>>  "nbformat": 4,
>>  "nbformat_minor": 2
>> }
